[{"title":"GPU Performance","url":"/2025/05/27/GPU-Performance/","content":"<h1 id=\"GPU算力与带宽指标以及测试方法\"><a href=\"#GPU算力与带宽指标以及测试方法\" class=\"headerlink\" title=\"GPU算力与带宽指标以及测试方法\"></a>GPU算力与带宽指标以及测试方法</h1><p>来源项目：智源基础规格评测</p>\n<h2 id=\"算力\"><a href=\"#算力\" class=\"headerlink\" title=\"算力\"></a>算力</h2><h3 id=\"测试项\"><a href=\"#测试项\" class=\"headerlink\" title=\"测试项\"></a>测试项</h3><p>数据类型包括：BF16、FP16、FP32、FP64、FP8、INT8、TF32等。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>位宽</th>\n<th>精度范围</th>\n<th>特点与用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FP64</td>\n<td>64位</td>\n<td>极高精度</td>\n<td>科学计算、金融分析、高精度仿真</td>\n</tr>\n<tr>\n<td>FP32</td>\n<td>32位</td>\n<td>高精度</td>\n<td>深度学习训练常用默认精度</td>\n</tr>\n<tr>\n<td>TF32</td>\n<td>19-bit (in 32-bit slot)</td>\n<td>FP32范围，精度低于FP32</td>\n<td>NVIDIA特有：用于加速训练，保持数值稳定性</td>\n</tr>\n<tr>\n<td>FP16</td>\n<td>16位</td>\n<td>中精度</td>\n<td>深度学习训练和推理中的主流低精度格式</td>\n</tr>\n<tr>\n<td>BF16</td>\n<td>16位</td>\n<td>FP32范围，精度低</td>\n<td>Google主推：训练更稳定，兼容FP32范围</td>\n</tr>\n<tr>\n<td>FP8</td>\n<td>8位</td>\n<td>精度非常低</td>\n<td>最新研究方向，推理为主（如 transformer 推理）</td>\n</tr>\n<tr>\n<td>INT8</td>\n<td>8位</td>\n<td>离散整数</td>\n<td>推理加速，速度快，功耗低，量化模型常用</td>\n</tr>\n</tbody></table>\n<h3 id=\"算力的定义\"><a href=\"#算力的定义\" class=\"headerlink\" title=\"算力的定义\"></a>算力的定义</h3><p>指系统处理数据、执行计算任务的能力，通常以单位时间内完成的计算量衡量。</p>\n<p>TFLOPS常用于AI推理芯片，统计的是每秒的操作次数。</p>\n<h3 id=\"算力的测试方法\"><a href=\"#算力的测试方法\" class=\"headerlink\" title=\"算力的测试方法\"></a>算力的测试方法</h3><p>调用通用矩阵乘法进行测试，m*k,k*n的两个矩阵一次iter，ops&#x3D;m*n*k*2(每次乘加运算共两次)，这个值除以耗时。</p>\n<h2 id=\"带宽\"><a href=\"#带宽\" class=\"headerlink\" title=\"带宽\"></a>带宽</h2><p>包括interconnect-MPI_interserver、interconnect-MPI_intraserver、interconnect-P2P_interserver、interconnect-P2P_intraserver、interconnect-h2d、main_memory-bandwidth、main_memory-capacity</p>\n<table>\n<thead>\n<tr>\n<th>项目名称</th>\n<th>测什么？</th>\n<th>应用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>interconnect-MPI_interserver</td>\n<td>跨机 MPI 带宽&#x2F;延迟</td>\n<td>多节点训练</td>\n</tr>\n<tr>\n<td>interconnect-MPI_intraserver</td>\n<td>单机 MPI 通信</td>\n<td>多进程训练、NUMA 架构</td>\n</tr>\n<tr>\n<td>interconnect-P2P_interserver</td>\n<td>跨机 GPU 直连传输</td>\n<td>GPU RDMA 通信评估</td>\n</tr>\n<tr>\n<td>interconnect-P2P_intraserver</td>\n<td>单机 GPU 直连传输</td>\n<td>多 GPU 通信，NVLink 性能评估</td>\n</tr>\n<tr>\n<td>interconnect-h2d</td>\n<td>CPU → GPU 传输带宽</td>\n<td>DataLoader 吞吐测试</td>\n</tr>\n<tr>\n<td>main_memory-bandwidth</td>\n<td>内存带宽</td>\n<td>大批数据加载、预处理性能评估</td>\n</tr>\n<tr>\n<td>main_memory-capacity</td>\n<td>内存容量</td>\n<td>检查是否能跑大模型</td>\n</tr>\n</tbody></table>\n<p>interconnect-MPI_intraserver：调用all reduce算子测试。</p>\n<p><a href=\"https://tech.preferred.jp/en/blog/technologies-behind-distributed-deep-learning-allreduce/\">https://tech.preferred.jp/en/blog/technologies-behind-distributed-deep-learning-allreduce/</a></p>\n<p>计算方式：它通过将计算和通信均匀地分布在所有参与进程上来消除瓶颈进程。</p>\n<p>数据大小SIZE，进程个数gpu_nums，2*SIZE*（gpu_nums-1）&#x2F;gpu_Nums&#x2F;times</p>\n<p>interconnect-P2P_intraserver：服务器内不同设备之间点对点互联带宽，衡量GPU到GPU之间的通信速度。不经过host。</p>\n<p>计算方式：SIZE&#x2F;times</p>\n<p>interconnect-h2d：从主机向设备端传输数据的带宽。</p>\n<p>计算方式：SIZE&#x2F;times</p>\n<p>main_memory-bandwidth：设备显存带宽</p>\n<p>计算方式：从显存读取，再写入到显存。global memory的读+写，所以2*SIZE&#x2F;times</p>\n<p>main_memory-capacity：显存容量</p>\n<p>计算方法：在不崩溃、不 OOM 的情况下，可以分配的显存总量。循环分配多个 block 的显存，直到 <code>musaMalloc</code> 失败，记录已成功分配的总量，即为主存容量估计。</p>\n<h2 id=\"benchmark\"><a href=\"#benchmark\" class=\"headerlink\" title=\"benchmark\"></a>benchmark</h2><p>PyTorch算子或原语，调用pytorch算子测试。</p>\n<p>调用torch.mm算子来测试算力，计算方法与toolkit相同。</p>\n<h2 id=\"toolkit\"><a href=\"#toolkit\" class=\"headerlink\" title=\"toolkit\"></a>toolkit</h2><p>厂商专用工具，二进制可执行文件或者CUDA C&#x2F;C++源码，直接调用C++代码。</p>\n<p>有的调用了mudnn有的调用了mublas的matmal，调用mudnn就是cpp文件，调用mublas就是mu文件。</p>\n<p>计算方式是一样的，做矩阵乘法m*k,k*n的两个矩阵一次iter，ops&#x3D;m*n*k*2(每次乘加运算共两次)</p>\n<p>TFLOPS &#x3D; FLOPS &#x2F; 1.0e12;</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/NpQlK5MXNVW2QqDv/img/51bc58ba-3880-4fc8-9d83-56b9b708258f.png\" alt=\"image.png\"></p>\n"},{"title":"Org Mode","url":"/2021/09/07/Org-Mode/","content":"<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><ol>\n<li><a href=\"https://orgmode.org/\">org mode</a></li>\n</ol>\n","categories":["Emacs","OrgMode"],"tags":["OrgMode"]},{"title":"dB,dBm与dBw","url":"/2023/09/25/dB-dBm%E4%B8%8EdBw/","content":"<h1 id=\"dB、dBm与dBw\"><a href=\"#dB、dBm与dBw\" class=\"headerlink\" title=\"dB、dBm与dBw\"></a>dB、dBm与dBw</h1><h2 id=\"dB\"><a href=\"#dB\" class=\"headerlink\" title=\"dB\"></a>dB</h2><p>​\t\tdB是无线通信中的基本概念。如“传播损耗是 dB”、“发射功率是dBm”、“天线增益是dBi”。</p>\n<p>​\t\t最常见的3dB，它在功率图或者误码率图中经常出现，下降3dB就是指功率下降一半，3dB点指的就是半功率点。</p>\n<p>​\t\t+3dB表示增大为原来的两倍，-3dB表示下降为原来的1&#x2F;2.</p>\n<blockquote>\n<p>dB &#x3D; 10lg(P1&#x2F;P0)</p>\n</blockquote>\n<p>​\t\tdB表示功率P1相对于参考功率P0的大小关系。</p>\n<p>​\t\t常用的dB值中，+10dB表示功率增加为原来的10倍，-10dB表示功率减小为原来的1&#x2F;10.</p>\n<p>​\t\t可见，dB是一个相对值，它的作用是把一个很大或者很小的数，用一个简短的形式表达出来。这可以极大的方便我们的计算和描述。尤其是在绘制表格的时候，如果没有换算成dB，那么坐标轴将很长无法表示。</p>\n<blockquote>\n<p>功率变化增大到原来的100000000倍，用dB表示为10lg10^8 &#x3D; 80dB，减小到原来的0.00000001倍，用dB表示为-80dB。</p>\n</blockquote>\n<h2 id=\"dBm与dBw\"><a href=\"#dBm与dBw\" class=\"headerlink\" title=\"dBm与dBw\"></a>dBm与dBw</h2><p>​\t\t这是最常用的两个单位。它们对应的就是把dB公式中的参考功率P0分别变换成1mW、1W。由于1mW、1W都是确定的值，因此dBm和dBw都可以表示功率的绝对值。</p>\n<p><img src=\"/images/db/convert.png\" alt=\"convert\"></p>\n<p>​\t\t这里需要特别记住的是1W&#x3D;30dBm。</p>\n<blockquote>\n<p>例子：44dBm &#x3D; 30dBm + 10dB + 10dB - 3dB -3dB，<br>因此44dBm &#x3D; 1W×10×10&#x2F;2&#x2F;2 &#x3D; 25W</p>\n</blockquote>\n<p>​\t\t这里需要注意，等式右侧除了30dBm，其余的拆分项都要用dB表示。即用一个dBx减另一个dBx时，得到的结果用dB表示。如功率46dBm比功率40dBm大6dB。</p>\n<p>​\t\t另外要注意dB是相对值，而dBm和dBw则对应的是绝对值。</p>\n<blockquote>\n<p>例如46dB表示P1为P0的4万倍，46dBm表示P1的值为40W。</p>\n</blockquote>\n<p>​\t\tdB家族中常见的还有dBi、dBd、dBc。 它们的计算方法与dB的计算方法完全一样，表示的还是功率的相对值。不同的是，它们的参考基准不同，即分母上的参考功率P0 所代表的含义不同。</p>\n<p>​\t\t此外，dB家族不仅可以表示功率的增益和损耗，还可以表示电压、电流、音频等，大家要具体场景具体应用。需要注意的是，对于功率的增益，我们用10lg(Po &#x2F;Pi )，对于电压和电流的增益，要用20lg(Vo &#x2F;Vi )、20lg(Io &#x2F;Ii)。</p>\n<h2 id=\"dB家族\"><a href=\"#dB家族\" class=\"headerlink\" title=\"dB家族\"></a>dB家族</h2><p><img src=\"/images/db/family.png\" alt=\"family\"></p>\n"},{"title":"docker","url":"/2025/03/08/docker/","content":"<ul>\n<li><a href=\"#%E5%BC%95%E8%A8%80\">引言</a><ul>\n<li><a href=\"#docker%E6%98%AF%E4%BB%80%E4%B9%88\">Docker是什么</a></li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E4%BA%86%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98\">解决了哪些问题</a></li>\n</ul>\n</li>\n<li><a href=\"#docker%E7%9A%84%E5%8E%9F%E7%90%86\">Docker的原理</a><ul>\n<li><a href=\"#%E5%AE%B9%E5%99%A8-vs-%E8%99%9A%E6%8B%9F%E6%9C%BA\">容器 vs. 虚拟机</a></li>\n<li><a href=\"#docker%E7%9A%84%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6\">Docker的核心组件</a></li>\n<li><a href=\"#docker%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF\">Docker底层技术</a></li>\n</ul>\n</li>\n<li><a href=\"#docker%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE\">Docker的安装与配置</a><ul>\n<li><a href=\"#%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85\">在Linux系统上的安装</a></li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE\">基本配置</a></li>\n</ul>\n</li>\n<li><a href=\"#docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\">Docker基本使用</a><ul>\n<li><a href=\"#%E9%95%9C%E5%83%8F%E7%AE%A1%E7%90%86\">镜像管理</a></li>\n<li><a href=\"#%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86\">容器管理</a></li>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96\">数据持久化</a></li>\n<li><a href=\"#%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE\">网络配置</a></li>\n</ul>\n</li>\n<li><a href=\"#docker%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95\">Docker进阶用法</a><ul>\n<li><a href=\"#dockerfile%E7%BC%96%E5%86%99%E4%B8%8E%E4%BC%98%E5%8C%96\">Dockerfile编写与优化</a></li>\n<li><a href=\"#docker-compose%E7%AE%80%E4%BB%8B\">Docker Compose简介</a></li>\n<li><a href=\"#%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2\">常见服务部署</a></li>\n<li><a href=\"#%E9%80%9A%E8%BF%87ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95docker%E5%AE%B9%E5%99%A8\">通过SSH远程登录Docker容器</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5\">相关链接</a></li>\n</ul>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><h2 id=\"Docker是什么\"><a href=\"#Docker是什么\" class=\"headerlink\" title=\"Docker是什么\"></a>Docker是什么</h2><p>&emsp;&emsp;Docker是一种基于容器的虚拟化技术，它能够将应用及其所有依赖打包到一个独立的环境中运行。Docker使应用能够在任何支持Docker的环境中运行，而不会受到底层操系统或硬件的影响。</p>\n<p>&emsp;&emsp;Docker由Docker引擎提供支持，它使用容器来运行应用程序。与传统的虚拟机不同，Docker容器直接运行在宿主机的内核之上，因此更轻量，更高效。</p>\n<p>Docker主要由以下核心组件组成:</p>\n<p>  **镜像(Image)**：应用及其环境的只读模板，可以用来创建容器。</p>\n<p>  **容器(Container)**：基于镜像运行的实例，彼此隔离，类似于轻量级虚拟机。</p>\n<p>  **仓库(Registry)**：存储和分发镜像的地方，如Docker Hub、阿里云镜像仓库等。</p>\n<h2 id=\"解决了哪些问题\"><a href=\"#解决了哪些问题\" class=\"headerlink\" title=\"解决了哪些问题\"></a>解决了哪些问题</h2><ol>\n<li>环境一致性问题</li>\n<li>依赖管理与部署复杂度</li>\n<li>资源占用高、启动慢</li>\n<li>持续集成与交付（CI&#x2F;CD）困难</li>\n<li>迁移和扩展困难</li>\n</ol>\n<h1 id=\"Docker的原理\"><a href=\"#Docker的原理\" class=\"headerlink\" title=\"Docker的原理\"></a>Docker的原理</h1><h2 id=\"容器-vs-虚拟机\"><a href=\"#容器-vs-虚拟机\" class=\"headerlink\" title=\"容器 vs. 虚拟机\"></a>容器 vs. 虚拟机</h2><p>&emsp;&emsp;虚拟机是传统的虚拟化方式。它通过Hypervisor(虚拟机管理程序)在宿主机上运行多个独立的操作系统，每个虚拟机都有自己的内核、文件系统和应用程序。因此，虚拟机的隔离性强，但资源开销大，启动慢。</p>\n<p>&emsp;&emsp;Docker容器不需要额外的操作系统，而是共享宿主机的内核，并利用Namespace和Cgroups进行资源隔离和管理。这样容器可以在不影响其他应用的情况下运行，并且占用更少的资源，启动速度极快。</p>\n<h2 id=\"Docker的核心组件\"><a href=\"#Docker的核心组件\" class=\"headerlink\" title=\"Docker的核心组件\"></a>Docker的核心组件</h2><ol>\n<li><p>镜像</p>\n<p>Docker镜像是一个只读模板，包含了运行应用所需的所有文件、环境变量和依赖库。Docker容器就是基于镜像创建的。</p>\n<p>通过docker pull从仓库下载镜像，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu:latest</span><br></pre></td></tr></table></figure>\n<p>或者通过docker build自定义构建镜像（使用Dockerfile）。</p>\n</li>\n<li><p>容器</p>\n<p>容器时镜像的运行实例，它包含了应用程序及其运行时环境，并且相互隔离。</p>\n<p>通过docker run启动一个容器，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure>\n<p>容器可以随时停止、重启、删除，而不会影响宿主机环境。</p>\n</li>\n<li><p>仓库</p>\n</li>\n</ol>\n<p>&emsp;&emsp;Docker Registry是存储和分发Docker镜像的地方，常见的公共镜像仓库由Docker Hub、阿里云镜像仓库等。</p>\n<p>&emsp;&emsp;docker push：上传镜像到仓库</p>\n<p>&emsp;&emsp;docker pull：从仓库拉取镜像</p>\n<h2 id=\"Docker底层技术\"><a href=\"#Docker底层技术\" class=\"headerlink\" title=\"Docker底层技术\"></a>Docker底层技术</h2><ol>\n<li>Namespace（命名空间）————资源隔离</li>\n</ol>\n<p>&emsp;&emsp;Namespace是Linux内核提供的隔离机制，Docker通过Namespace让每个容器由独立的进程、网络、文件系统等。不同容器的进程互不干扰即进程隔离，每个容器有独立的IP和端口即网络隔离，每个容器有自己的根文件系统即文件系统隔离，不同容器的共享内存、信号量等互不干扰即进程间通信隔离。</p>\n<ol start=\"2\">\n<li>Cgroups（Control Groups）————资源控制</li>\n</ol>\n<p>&emsp;&emsp;Cgroups允许Docker限制容器的CPU、内存、网络、IO资源，防止某个容器占用过多资源，影响主机性能。如限制容器使用1个CPU核心和512MB内存：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --cpus=1 --memory=512m ubuntu</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>UnionFS（联合文件系统）————镜像分层<br>&emsp;&emsp;UnionFS是Docker镜像的存储机制，它允许多个文件系统层叠加，从而提高存储效率。Docker镜像由多个只读层组成，容器运行时会添加一个可写层。只读层是镜像的基础层（如Ubuntu、Python依赖等）。可写层是运行容器时动态创建，存储用户的修改。通过docker commit可以保存容器的可写层，形成新的镜像。</li>\n</ol>\n<h1 id=\"Docker的安装与配置\"><a href=\"#Docker的安装与配置\" class=\"headerlink\" title=\"Docker的安装与配置\"></a>Docker的安装与配置</h1><h2 id=\"在Linux系统上的安装\"><a href=\"#在Linux系统上的安装\" class=\"headerlink\" title=\"在Linux系统上的安装\"></a>在Linux系统上的安装</h2><ol>\n<li>更新系统并安装必要的依赖<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update &amp;&amp; <span class=\"built_in\">sudo</span> apt install -y ca-certificates curl gnupg</span><br></pre></td></tr></table></figure></li>\n<li>添加Docker官方GPG密钥<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> install -m 0755 -d /etc/apt/keyrings</span><br><span class=\"line\">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class=\"built_in\">sudo</span> <span class=\"built_in\">tee</span> /etc/apt/keyrings/docker.asc &gt; /dev/null</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br></pre></td></tr></table></figure></li>\n<li>添加Docker官方软件源<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb [arch=<span class=\"subst\">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span> | <span class=\"built_in\">sudo</span> <span class=\"built_in\">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br></pre></td></tr></table></figure></li>\n<li>安装Docker引擎<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure></li>\n<li>启动并设置Docker开机自启<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl <span class=\"built_in\">enable</span> --now docker</span><br></pre></td></tr></table></figure></li>\n<li>验证Docker是否安装成功<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker --version</span><br><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure></li>\n<li>将当前用户加入Docker组（可选，避免每次使用sudo）<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG docker <span class=\"variable\">$USER</span></span><br><span class=\"line\">newgrp docker  <span class=\"comment\"># 重新加载用户组</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><ol>\n<li>配置国内镜像加速</li>\n</ol>\n<p>&emsp;&emsp;Docker默认从Docker Hub拉取镜像，但由于网络原因，国内拉取速度较慢。可以配置国内镜像加速器（如阿里云、腾讯云等）：</p>\n<p>&emsp;&emsp;编辑Docker配置文件，若不存在，手动创建：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> nano /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;添加以下内容，以阿里云为例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://&lt;你的加速器地址&gt;&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;保存并重启Docker服务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl daemon-reload</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改Docker默认存储路径</li>\n</ol>\n<p>&emsp;&emsp;Docker默认将容器和镜像存储在&#x2F;var&#x2F;lib&#x2F;docker，如果磁盘空间有限，可以将存储位置修改到其他目录，如&#x2F;data&#x2F;docker。步骤如下：</p>\n<p>&emsp;&emsp;停止Docker服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl stop docker</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;移动默认存储目录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">mv</span> /var/lib/docker /data/docker</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;修改Docker配置文件（&#x2F;etc&#x2F;docker&#x2F;daemon.json）并添加以下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;data-root&quot;</span>: <span class=\"string\">&quot;/data/docker&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;重启Docker服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl daemon-reload</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;验证存储路径</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker info | grep <span class=\"string\">&quot;Docker Root Dir&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>启用远程API（用于SSH远程管理）</li>\n</ol>\n<p>&emsp;&emsp;默认情况下，Docker只能在本机运行。如果需要远程管理Docker（如使用SSH连接并控制远程主机上的Docker），可以开启Docker API远程访问。步骤如下：</p>\n<p>&emsp;&emsp;修改Docker配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;hosts&quot;</span>: [<span class=\"string\">&quot;tcp://0.0.0.0:2375&quot;</span>, <span class=\"string\">&quot;unix:///var/run/docker.sock&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;重启Docker服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;在远程客户端访问Docker主机</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> DOCKER_HOST=<span class=\"string\">&quot;tcp://远程服务器IP:2375&quot;</span></span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;如果能正确返回容器列表，则说明远程访问已启用。</p>\n<ol start=\"4\">\n<li>限制Docker资源使用</li>\n</ol>\n<p>&emsp;&emsp;在多容器环境下，为了避免某些容器占用过多资源，可以使用Cgroups限制CPU、内存等。</p>\n<p>&emsp;&emsp;限制CPU核心数</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --cpus=1 ubuntu</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;限制内存</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --memory=512m ubuntu</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;限制CPU占用率</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --cpu-shares=512 ubuntu</span><br></pre></td></tr></table></figure>\n<h1 id=\"Docker基本使用\"><a href=\"#Docker基本使用\" class=\"headerlink\" title=\"Docker基本使用\"></a>Docker基本使用</h1><h2 id=\"镜像管理\"><a href=\"#镜像管理\" class=\"headerlink\" title=\"镜像管理\"></a>镜像管理</h2><ol>\n<li>拉取镜像<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull ubuntu:20.04</span><br></pre></td></tr></table></figure></li>\n<li>列出本地镜像<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></li>\n<li>删除镜像<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rmi 镜像ID</span><br></pre></td></tr></table></figure>\n&emsp;&emsp;删除未使用的镜像，节省磁盘空间<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker image prune -a</span><br></pre></td></tr></table></figure></li>\n<li>使用已有容器生成新的镜像</li>\n</ol>\n<p>&emsp;&emsp;提交容器为新的镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker commit -m <span class=\"string\">&quot;Add vim editor&quot;</span> -a <span class=\"string\">&quot;mccxadmin&quot;</span> my-ubuntu my-ubuntu-vim:1.0</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;其中-m为添加提交信息，说明修改内容，-a作者信息，my-ubuntu为源容器名称，后者为新镜像的名称和标签。</p>\n<p>&emsp;&emsp;验证新镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h2><ol>\n<li>运行容器<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name my-nginx -p 8080:80 nginx</span><br></pre></td></tr></table></figure></li>\n<li>查看运行中的容器</li>\n</ol>\n<p>&emsp;&emsp;显示所有运行中的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;显示所有已停止的容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>进入容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it my-nginx bash</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;-it让容器交互式运行Bash命令行。</p>\n</li>\n<li><p>停止和删除容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker stop my-nginx    <span class=\"comment\"># 停止容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">rm</span> my-nginx      <span class=\"comment\"># 删除容器</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;docker rm -f my-nginx强制删除正在运行的容器</p>\n</li>\n<li><p>自动重启容器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --restart=always --name auto-container my-app</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;–restart-always使容器在崩溃后自动重启，适用于生产环境。</p>\n</li>\n</ol>\n<h2 id=\"数据持久化\"><a href=\"#数据持久化\" class=\"headerlink\" title=\"数据持久化\"></a>数据持久化</h2><p>&emsp;&emsp;容器本质上式临时的，重启或删除后，内部数据会丢失，数据持久化确保数据库、日志、配置文件等关键数据不会因容器销毁而丢失，一种方式式将宿主机目录映射到容器内。基本用法如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -v /data/app:/app my-app</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;这里宿主机目录：容器内目录，数据会保存在宿主机上。</p>\n<h2 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h2><p>&emsp;&emsp;Docker提供了多种网络模式，可以直接使用宿主机网络，性能能高。容器中的端口直接暴露在宿主机上，省去了-p端口映射。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --network=host nginx</span><br></pre></td></tr></table></figure>\n<h1 id=\"Docker进阶用法\"><a href=\"#Docker进阶用法\" class=\"headerlink\" title=\"Docker进阶用法\"></a>Docker进阶用法</h1><h2 id=\"Dockerfile编写与优化\"><a href=\"#Dockerfile编写与优化\" class=\"headerlink\" title=\"Dockerfile编写与优化\"></a>Dockerfile编写与优化</h2><h2 id=\"Docker-Compose简介\"><a href=\"#Docker-Compose简介\" class=\"headerlink\" title=\"Docker Compose简介\"></a>Docker Compose简介</h2><h2 id=\"常见服务部署\"><a href=\"#常见服务部署\" class=\"headerlink\" title=\"常见服务部署\"></a>常见服务部署</h2><h2 id=\"通过SSH远程登录Docker容器\"><a href=\"#通过SSH远程登录Docker容器\" class=\"headerlink\" title=\"通过SSH远程登录Docker容器\"></a>通过SSH远程登录Docker容器</h2><p>&emsp;&emsp;在Docker容器中安装SSH服务器并修改SSH端口，允许SSH远程登录容器。默认情况下，Docker容器是无SSH服务器的，如果需要远程SSH进入容器，需要手动安装和配置openssh-server。</p>\n<ol>\n<li>使用–network&#x3D;host时</li>\n</ol>\n<p>&emsp;&emsp;当使用–network&#x3D;host，容器中的SSH端口会直接映射到宿主机，无需使用-p选项进行端口映射。这种情况下配置步骤如下：</p>\n<p>&emsp;&emsp;在容器内安装OpenSSH Server</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i s@/archive.ubuntu.com/@/mirrors.tuna.tsinghua.edu.cn/@g /etc/apt/sources.list &amp;&amp; apt-get update -y</span><br><span class=\"line\">apt install -y openssh-server</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;设置SSH监听的端口号，允许root通过SSH直接登录，SSH允许密码登录：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">PORT=10086</span><br><span class=\"line\">sed -i -e <span class=\"string\">&quot;s/^#Port 22/Port <span class=\"variable\">$PORT</span>/&quot;</span> \\</span><br><span class=\"line\">       -e <span class=\"string\">&#x27;s/^#PermitRootLogin prohibit-password/PermitRootLogin yes/&#x27;</span> \\</span><br><span class=\"line\">       -e <span class=\"string\">&#x27;s/^#PasswordAuthentication yes/PasswordAuthentication yes/&#x27;</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;设置密码，启动SSH服务器</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;root:root&#x27;</span> | chpasswd &amp;&amp; /etc/init.d/ssh start</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用-p时</li>\n</ol>\n<p>&emsp;&emsp;使用-p 10086:22表示把容器的22端口映射到宿主机的10086端口，这样可以通过ssh root@宿主机IP -p 10086访问。</p>\n<p>&emsp;&emsp;在容器内安装并启动SSH服务</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt update &amp;&amp; apt install -y openssh-server</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /var/run/sshd</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;root:root&#x27;</span> | chpasswd  <span class=\"comment\"># 设置 root 账户密码</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/&#x27;</span> /etc/ssh/sshd_config</span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;s/#PasswordAuthentication no/PasswordAuthentication yes/&#x27;</span> /etc/ssh/sshd_config</span><br><span class=\"line\">service ssh restart  <span class=\"comment\"># 启动 SSH 服务</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h1><p>&emsp;&emsp;docker仓库：<a href=\"https://github.com/docker-archive/docker-ce\">https://github.com/docker-archive/docker-ce</a><br>&emsp;&emsp;docker官网：<a href=\"https://www.docker.com/\">https://www.docker.com/</a></p>\n"},{"title":"git","url":"/2022/11/13/git/","content":"<ul>\n<li><a href=\"#git%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\">Git基础概念</a><ul>\n<li><a href=\"#git-vs-svn-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9git\">Git vs SVN: 为什么选择Git？</a></li>\n<li><a href=\"#git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\">Git版本控制的基本原理</a></li>\n<li><a href=\"#git%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\">Git的核心概念</a></li>\n<li><a href=\"#git%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F\">Git的工作区域</a></li>\n</ul>\n</li>\n<li><a href=\"#git%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE\">Git安装与配置</a><ul>\n<li><a href=\"#linux%E4%B8%8B%E7%9A%84git%E5%AE%89%E8%A3%85\">Linux下的Git安装</a></li>\n<li><a href=\"#git%E9%85%8D%E7%BD%AE\">Git配置</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AEssh-key%E4%BB%A5%E8%BF%9E%E6%8E%A5githubgitlab\">配置SSH Key以连接GitHub&#x2F;GitLab</a></li>\n</ul>\n</li>\n<li><a href=\"#git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\">Git基本操作</a><ul>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93\">创建和初始化仓库</a></li>\n<li><a href=\"#%E5%85%8B%E9%9A%86%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\">克隆远程仓库</a></li>\n<li><a href=\"#%E6%8F%90%E4%BA%A4%E6%9B%B4%E6%94%B9\">提交更改</a></li>\n<li><a href=\"#%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95\">查看提交记录</a></li>\n<li><a href=\"#%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86\">分支管理</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86\">远程仓库管理</a><ul>\n<li><a href=\"#%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\">添加远程仓库</a></li>\n<li><a href=\"#%E6%8E%A8%E9%80%81%E4%BB%A3%E7%A0%81\">推送代码</a></li>\n<li><a href=\"#%E6%8B%89%E5%8F%96%E5%92%8C%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81\">拉取和同步代码</a></li>\n<li><a href=\"#%E5%A4%84%E7%90%86%E5%86%B2%E7%AA%81\">处理冲突</a></li>\n<li><a href=\"#fork%E5%92%8Cpull-request%E7%9A%84%E4%BD%BF%E7%94%A8\">Fork和Pull Request的使用</a></li>\n</ul>\n</li>\n<li><a href=\"#git%E8%BF%9B%E9%98%B6%E6%93%8D%E4%BD%9C\">Git进阶操作</a><ul>\n<li><a href=\"#git-reset-vs-revert-vs-checkout\">Git Reset vs. Revert vs. Checkout</a></li>\n<li><a href=\"#git-rebase%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\">Git Rebase的应用场景</a></li>\n<li><a href=\"#cherry-pick%E9%80%89%E5%8F%96%E6%8F%90%E4%BA%A4\">Cherry-pick选取提交</a></li>\n<li><a href=\"#%E4%BA%A4%E4%BA%92%E5%BC%8Frebase\">交互式Rebase</a></li>\n<li><a href=\"#submodule\">Submodule</a></li>\n</ul>\n</li>\n<li><a href=\"#github--gitlab%E7%9B%B8%E5%85%B3\">GitHub &amp; GitLab相关</a><ul>\n<li><a href=\"#githubgitlab%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\">GitHub&#x2F;GitLab的基本使用</a></li>\n<li><a href=\"#github-actionsgitlab-cicd\">Github Actions&#x2F;GitLab CI&#x2F;CD</a></li>\n<li><a href=\"#webhook%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2\">Webhook和自动化部署</a></li>\n<li><a href=\"#%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%92%8C%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C\">私有仓库和团队协作</a></li>\n</ul>\n</li>\n<li><a href=\"#git%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7\">Git高级技巧</a><ul>\n<li><a href=\"#git-hooks\">Git Hooks</a></li>\n<li><a href=\"#git-lfs\">Git LFS</a></li>\n<li><a href=\"#git-bisect\">Git Bisect</a></li>\n<li><a href=\"#git-blame\">Git Blame</a></li>\n<li><a href=\"#git-worktree\">Git Worktree</a></li>\n</ul>\n</li>\n<li><a href=\"#git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\">Git常见问题与解决方案</a><ul>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E5%9B%9E%E6%BB%9A%E8%AF%AF%E6%93%8D%E4%BD%9C\">如何回滚误操作？</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E8%AF%AF%E5%88%A0%E5%88%86%E6%94%AF\">如何恢复误删分支？</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81\">如何处理合并冲突？</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3detached-head%E9%97%AE%E9%A2%98\">如何解决detached HEAD问题？</a></li>\n<li><a href=\"#%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%AE%A1%E7%90%86gitigonre\">如何高效管理.gitigonre?</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Git基础概念\"><a href=\"#Git基础概念\" class=\"headerlink\" title=\"Git基础概念\"></a>Git基础概念</h1><h2 id=\"Git-vs-SVN-为什么选择Git？\"><a href=\"#Git-vs-SVN-为什么选择Git？\" class=\"headerlink\" title=\"Git vs SVN: 为什么选择Git？\"></a>Git vs SVN: 为什么选择Git？</h2><p> &emsp;&emsp;Git和SVN时常见的版本控制工具，但是Git相比于SVN具有更多优势：</p>\n<ol>\n<li><strong>分布式版本控制</strong>：Git每个用户都有一份完整的仓库副本，而SVN仅仅是一个主仓库与涉及其的源码文件。</li>\n<li><strong>快速操作</strong>：由于大量操作都在本地运行，Git上传&#x2F;下载速度更快，SVN则需要每次连接远端。</li>\n<li><strong>强大的分支管理</strong>：Git允许用户完全独立地创建、合并、删除分支，SVN则需要专门提交。</li>\n<li><strong>更好的回溯功能</strong>：由于Git采用离散式数据库，任何时刻都可以回溯到任意版本。</li>\n</ol>\n<h2 id=\"Git版本控制的基本原理\"><a href=\"#Git版本控制的基本原理\" class=\"headerlink\" title=\"Git版本控制的基本原理\"></a>Git版本控制的基本原理</h2><p>参考链接：<a href=\"https://git-scm.com/book/zh/v2\">text</a></p>\n<p>&emsp;&emsp;版本控制是一种记录一个或若干文件内容变化，以便来查阅特定版本修订情况的系统。Git是一种分布式版本控制一同，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来，包括完整的历史记录。任何一处协同工作的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的克隆操作，都是一次对代码仓库的完整备份。<br><img src=\"/image.png\" alt=\"alt text\"></p>\n<p>&emsp;&emsp;Git是把数据看作是对小型我呢见系统的一系列快照。在Git中，每当提交更新或保存项目状态时，它就会对当时的全部文件创建一个快照并保存这个快照的索引。为了效率，如果文件没有修改，Git不再重新存储该文件，而是只保留一个链接指向之前存储的文件，Git对待数据像是一个快照流。<br><img src=\"/image-1.png\" alt=\"alt text\"></p>\n<p>&emsp;&emsp;Git中所有的数据在存储前都计算校验和，然后以校验和来引用。Git用以计算校验和的机制叫做SHA-1散列（hash,哈希）。这是一个由40个十六进制字符（0-9和a-f）组成的字符串，基于Git中文件的内容或目录结构计算出来。Git数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名，SHA-l哈希看起来是这样：</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">24</span>b9da6552252987aa493b52f8696cd<span class=\"number\">6d3b00373</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git的核心概念\"><a href=\"#Git的核心概念\" class=\"headerlink\" title=\"Git的核心概念\"></a>Git的核心概念</h2><ol>\n<li>**commit(提交)**：Git保存的并不是文件修改，而是文件状态。每一次commit都不会覆盖之前的提交，可以随时回溯。</li>\n<li><strong>Branch(分支)</strong>:分支允许将工作分离在不同分支中，最终可以合并回主分支。</li>\n<li><strong>Merge(合并)</strong>:将不同分支的作业合并在一起，可以式普通合并或rebase操作。</li>\n<li><strong>Rebase</strong>:重排commit历史，可以把一个分支重新展示为另一个分支上的展开。</li>\n<li><strong>Tag(标签)</strong>:对特定提交点做标记，通常用于与版本关联。</li>\n<li><strong>Stach</strong>:暂存工作状态，在切换分支时保持现有工作不丢失。</li>\n</ol>\n<h2 id=\"Git的工作区域\"><a href=\"#Git的工作区域\" class=\"headerlink\" title=\"Git的工作区域\"></a>Git的工作区域</h2><p>&emsp;&emsp;Git使用三个区域来管理代码的状态：</p>\n<ol>\n<li><strong>Working Directory(工作目录)</strong>:存放正在工作的文件。是对项目的某个版本独立提取出来的内容。这些从Git仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</li>\n<li><strong>Staging Area(待提交区)</strong>:git add进入此区域，为提交准备。暂存区是一个文件，保存了下次要提交的文件列表信息，一般在Git仓库目录中。按照Git的术语叫做索引，不过一般说法还是叫暂存区。</li>\n<li><strong>Repository(本地仓库)</strong>:git commit后保存在此，可以添加远程仓库以使其他人使用。Git仓库目录是Git用来保存项目的元数据和对象数据库的地方。这是Git中最重要的部分，从其他计算机克隆仓库时，复制的就是这里的数据。<br><img src=\"/image-2.png\" alt=\"alt text\"></li>\n</ol>\n<p>&emsp;&emsp;Git有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。</p>\n<ol>\n<li>已修改表示修改了文件，但还没保存到数据库中。</li>\n<li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>\n<li>已提交表示数据已经安全地保存在本地数据库中。</li>\n</ol>\n<h1 id=\"Git安装与配置\"><a href=\"#Git安装与配置\" class=\"headerlink\" title=\"Git安装与配置\"></a>Git安装与配置</h1><h2 id=\"Linux下的Git安装\"><a href=\"#Linux下的Git安装\" class=\"headerlink\" title=\"Linux下的Git安装\"></a>Linux下的Git安装</h2><p>&emsp;&emsp;Linux各发行版均可通过包管理器安装Git,Ubuntu下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt install git -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Git配置\"><a href=\"#Git配置\" class=\"headerlink\" title=\"Git配置\"></a>Git配置</h2><p>&emsp;&emsp;安装完成后，需要进行一些基本配置，如用户信息、别名、编辑器等。<br>Git提交时需要记录用户信息，建议配置全局用户和邮箱：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;你的名字&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;你的邮箱@example.com&quot;</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;查看当前配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置SSH-Key以连接GitHub-GitLab\"><a href=\"#配置SSH-Key以连接GitHub-GitLab\" class=\"headerlink\" title=\"配置SSH Key以连接GitHub&#x2F;GitLab\"></a>配置SSH Key以连接GitHub&#x2F;GitLab</h2><p>&emsp;&emsp;为了方便推送代码到GitHub&#x2F;GitLab，需要配置SSH Key。</p>\n<ol>\n<li>生成SSH Key<br>&emsp;&emsp;在终端输入以下命令：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -b 4096 -C <span class=\"string\">&quot;你的邮箱@example.com&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>&emsp;&emsp;然后按回车，使用默认路径~&#x2F;.ssh&#x2F;id_rsa，并设置密码（可留空）。</p>\n<ol start=\"2\">\n<li><p>添加SSH Key到GitHub<br>&emsp;&emsp;复制SSH公钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> ~/.ssh/id_rsa.hub</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;登录GitHub，进入Settings-&gt;SSH and GPG keys，点击New SSH Key，粘贴公钥。</p>\n</li>\n<li><p>添加SSH Key到GitLab<br>&emsp;&emsp;登录GitLab，进入Preferences-&gt;SSH Keys,粘贴公钥。</p>\n</li>\n<li><p>测试SSH连接<br>&emsp;&emsp;GitHub</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;GitLab</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -T git@gitlab.com</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;如果看到 Hi username! You’ve successfully authenticated. 说明配置成功。</p>\n</li>\n</ol>\n<h1 id=\"Git基本操作\"><a href=\"#Git基本操作\" class=\"headerlink\" title=\"Git基本操作\"></a>Git基本操作</h1><h2 id=\"创建和初始化仓库\"><a href=\"#创建和初始化仓库\" class=\"headerlink\" title=\"创建和初始化仓库\"></a>创建和初始化仓库</h2><h2 id=\"克隆远程仓库\"><a href=\"#克隆远程仓库\" class=\"headerlink\" title=\"克隆远程仓库\"></a>克隆远程仓库</h2><h2 id=\"提交更改\"><a href=\"#提交更改\" class=\"headerlink\" title=\"提交更改\"></a>提交更改</h2><h2 id=\"查看提交记录\"><a href=\"#查看提交记录\" class=\"headerlink\" title=\"查看提交记录\"></a>查看提交记录</h2><h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h1 id=\"远程仓库管理\"><a href=\"#远程仓库管理\" class=\"headerlink\" title=\"远程仓库管理\"></a>远程仓库管理</h1><h2 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h2><h2 id=\"推送代码\"><a href=\"#推送代码\" class=\"headerlink\" title=\"推送代码\"></a>推送代码</h2><h2 id=\"拉取和同步代码\"><a href=\"#拉取和同步代码\" class=\"headerlink\" title=\"拉取和同步代码\"></a>拉取和同步代码</h2><h2 id=\"处理冲突\"><a href=\"#处理冲突\" class=\"headerlink\" title=\"处理冲突\"></a>处理冲突</h2><h2 id=\"Fork和Pull-Request的使用\"><a href=\"#Fork和Pull-Request的使用\" class=\"headerlink\" title=\"Fork和Pull Request的使用\"></a>Fork和Pull Request的使用</h2><h1 id=\"Git进阶操作\"><a href=\"#Git进阶操作\" class=\"headerlink\" title=\"Git进阶操作\"></a>Git进阶操作</h1><h2 id=\"Git-Reset-vs-Revert-vs-Checkout\"><a href=\"#Git-Reset-vs-Revert-vs-Checkout\" class=\"headerlink\" title=\"Git Reset vs. Revert vs. Checkout\"></a>Git Reset vs. Revert vs. Checkout</h2><h2 id=\"Git-Rebase的应用场景\"><a href=\"#Git-Rebase的应用场景\" class=\"headerlink\" title=\"Git Rebase的应用场景\"></a>Git Rebase的应用场景</h2><h2 id=\"Cherry-pick选取提交\"><a href=\"#Cherry-pick选取提交\" class=\"headerlink\" title=\"Cherry-pick选取提交\"></a>Cherry-pick选取提交</h2><h2 id=\"交互式Rebase\"><a href=\"#交互式Rebase\" class=\"headerlink\" title=\"交互式Rebase\"></a>交互式Rebase</h2><h2 id=\"Submodule\"><a href=\"#Submodule\" class=\"headerlink\" title=\"Submodule\"></a>Submodule</h2><h1 id=\"GitHub-GitLab相关\"><a href=\"#GitHub-GitLab相关\" class=\"headerlink\" title=\"GitHub &amp; GitLab相关\"></a>GitHub &amp; GitLab相关</h1><h2 id=\"GitHub-GitLab的基本使用\"><a href=\"#GitHub-GitLab的基本使用\" class=\"headerlink\" title=\"GitHub&#x2F;GitLab的基本使用\"></a>GitHub&#x2F;GitLab的基本使用</h2><h2 id=\"Github-Actions-GitLab-CI-CD\"><a href=\"#Github-Actions-GitLab-CI-CD\" class=\"headerlink\" title=\"Github Actions&#x2F;GitLab CI&#x2F;CD\"></a>Github Actions&#x2F;GitLab CI&#x2F;CD</h2><h2 id=\"Webhook和自动化部署\"><a href=\"#Webhook和自动化部署\" class=\"headerlink\" title=\"Webhook和自动化部署\"></a>Webhook和自动化部署</h2><h2 id=\"私有仓库和团队协作\"><a href=\"#私有仓库和团队协作\" class=\"headerlink\" title=\"私有仓库和团队协作\"></a>私有仓库和团队协作</h2><h1 id=\"Git高级技巧\"><a href=\"#Git高级技巧\" class=\"headerlink\" title=\"Git高级技巧\"></a>Git高级技巧</h1><h2 id=\"Git-Hooks\"><a href=\"#Git-Hooks\" class=\"headerlink\" title=\"Git Hooks\"></a>Git Hooks</h2><h2 id=\"Git-LFS\"><a href=\"#Git-LFS\" class=\"headerlink\" title=\"Git LFS\"></a>Git LFS</h2><h2 id=\"Git-Bisect\"><a href=\"#Git-Bisect\" class=\"headerlink\" title=\"Git Bisect\"></a>Git Bisect</h2><h2 id=\"Git-Blame\"><a href=\"#Git-Blame\" class=\"headerlink\" title=\"Git Blame\"></a>Git Blame</h2><h2 id=\"Git-Worktree\"><a href=\"#Git-Worktree\" class=\"headerlink\" title=\"Git Worktree\"></a>Git Worktree</h2><h1 id=\"Git常见问题与解决方案\"><a href=\"#Git常见问题与解决方案\" class=\"headerlink\" title=\"Git常见问题与解决方案\"></a>Git常见问题与解决方案</h1><h2 id=\"如何回滚误操作？\"><a href=\"#如何回滚误操作？\" class=\"headerlink\" title=\"如何回滚误操作？\"></a>如何回滚误操作？</h2><h2 id=\"如何恢复误删分支？\"><a href=\"#如何恢复误删分支？\" class=\"headerlink\" title=\"如何恢复误删分支？\"></a>如何恢复误删分支？</h2><h2 id=\"如何处理合并冲突？\"><a href=\"#如何处理合并冲突？\" class=\"headerlink\" title=\"如何处理合并冲突？\"></a>如何处理合并冲突？</h2><h2 id=\"如何解决detached-HEAD问题？\"><a href=\"#如何解决detached-HEAD问题？\" class=\"headerlink\" title=\"如何解决detached HEAD问题？\"></a>如何解决detached HEAD问题？</h2><h2 id=\"如何高效管理-gitigonre\"><a href=\"#如何高效管理-gitigonre\" class=\"headerlink\" title=\"如何高效管理.gitigonre?\"></a>如何高效管理.gitigonre?</h2>"},{"title":"matlab_check_platform","url":"/2023/09/25/matlab-check-platform/","content":"<h2 id=\"matlab中查看当前运行平台的方法\"><a href=\"#matlab中查看当前运行平台的方法\" class=\"headerlink\" title=\"matlab中查看当前运行平台的方法\"></a>matlab中查看当前运行平台的方法</h2><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ismac()</span><br><span class=\"line\">    <span class=\"comment\">% Code to run on Mac platform</span></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> isunix()</span><br><span class=\"line\">    <span class=\"comment\">% Code to run on Linux platform</span></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> ispc()</span><br><span class=\"line\">    <span class=\"comment\">% Code to run on Windows platform</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">disp</span>(<span class=\"string\">&#x27;Platform not supported&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n"},{"title":"matlab中标记3D图形中的某点","url":"/2023/09/25/matlab%E4%B8%AD%E6%A0%87%E8%AE%B03D%E5%9B%BE%E5%BD%A2%E4%B8%AD%E7%9A%84%E6%9F%90%E7%82%B9/","content":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>在雷达算法调试的过程中，为了方便查看2D检测的结果，将检测点结果可视化在三维频谱上。</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% x,y,z是要标记的点的坐标</span></span><br><span class=\"line\"><span class=\"comment\">% r.表示颜色</span></span><br><span class=\"line\"><span class=\"comment\">% ‘markersize’，30是点的大小</span></span><br><span class=\"line\"><span class=\"built_in\">plot3</span>(x,y,z,<span class=\"string\">&#x27;r.&#x27;</span>,<span class=\"string\">&#x27;markersize&#x27;</span>,<span class=\"string\">&#x27;30&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>大部分情况下需要同时选取数组的多个元素，使用sub2ind函数。<br>例子：对于矩阵A想要取出位置为[1,1]和位置[3,3]的元素，ind &#x3D; [1,1;3,3]，即第一列为行数，第二列为列数，命令A(sub2ind(size(A),ind(:,1),ind(:,2)))可达到取出该元素的目的。即plot3中的z。</p>\n"},{"title":"matlab查看工程中函数的调用关系","url":"/2023/09/25/matlab%E6%9F%A5%E7%9C%8B%E5%B7%A5%E7%A8%8B%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB/","content":"<p>在 MATLAB 中，你可以使用 “Dependency Analysis”（依赖分析）工具来快速查看函数之间的调用关系。这个工具可以帮助你理解你的代码是如何相互连接的，特别是在大型项目中。</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li>打开 MATLAB 并打开你的项目或代码文件。</li>\n<li>在 MATLAB 工具栏上选择 “Editor”（编辑器）标签。</li>\n<li>在编辑器中，打开你想要分析的主函数或代码文件。</li>\n<li>在编辑器中，右键单击函数名称，然后从弹出菜单中选择 “Show Dependencies”（显示依赖关系）。</li>\n</ol>\n<h2 id=\"依赖分析工具\"><a href=\"#依赖分析工具\" class=\"headerlink\" title=\"依赖分析工具\"></a>依赖分析工具</h2><p>依赖分析工具将在 MATLAB 窗口中显示函数的依赖关系图。这个图示表示了主函数和相关函数之间的调用关系，以及函数之间的依赖关系。<br>你可以在依赖分析工具中浏览不同函数之间的连接，单击节点以查看详细信息，包括调用图、输入和输出等。<br>请注意，依赖分析工具可以帮助你可视化函数之间的调用关系，但对于大型项目或复杂代码库，它可能会变得复杂。因此，在代码设计和编写时，良好的代码结构、注释和模块化可以更好地帮助你管理代码的调用关系。</p>\n"},{"title":"pdb debug","url":"/2025/05/27/pdb-debug/","content":"<h1 id=\"pdb-debug工具\"><a href=\"#pdb-debug工具\" class=\"headerlink\" title=\"pdb debug工具\"></a>pdb debug工具</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>pdb是Python内置的交互式源代码调试器，提供了设置断点、单步执行、查看堆栈帧、检查变量等功能，帮助开发者有效地调试代码。</p>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><ol>\n<li>在代码中设置断点</li>\n</ol>\n<p>在需要调试的代码位置插入以下代码行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">import pdb</span><br><span class=\"line\">pdb.set_trace()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用内置的breakpoint()函数（适用于Python3.7及以上版本）</li>\n</ol>\n<p>从Python3.7开始，可以使用内置的breakpoint()函数代替上述方法，当程序执行到breakpoint()时，会暂停并进入调试模式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">def double(x):</span><br><span class=\"line\">    breakpoint()</span><br><span class=\"line\">    <span class=\"built_in\">return</span> x * 2</span><br><span class=\"line\"></span><br><span class=\"line\">val = 3</span><br><span class=\"line\"><span class=\"built_in\">print</span>(f<span class=\"string\">&quot;&#123;val&#125; * 2 is &#123;double(val)&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>从命令行直接运行脚本并进入调试模式</li>\n</ol>\n<p>可以在运行Python脚本时通过命令行参数直接启动调试器，这将以调试模式启动脚本，程序会在第一行代码处暂停。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python -m pdb your_script.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用调试命令\"><a href=\"#常用调试命令\" class=\"headerlink\" title=\"常用调试命令\"></a>常用调试命令</h2><ul>\n<li><p>l (list)：显示当前代码行及其上下文。</p>\n</li>\n<li><p>n (next)：执行下一行代码。</p>\n</li>\n<li><p>s (step)：进入函数内部。</p>\n</li>\n<li><p>c (continue)：继续执行程序直到遇到下一个断点。</p>\n</li>\n<li><p>p (print)：打印变量的值，例如 p variable_name。</p>\n</li>\n<li><p>q (quit)：退出调试器。</p>\n</li>\n</ul>\n"},{"title":"tmux","url":"/2025/03/10/tmux/","content":""},{"title":"torch compile","url":"/2025/05/27/torch-compile/","content":"<h2 id=\"torch-compile-的编译流程\"><a href=\"#torch-compile-的编译流程\" class=\"headerlink\" title=\"torch.compile 的编译流程\"></a><code>torch.compile</code> 的编译流程</h2><p>PyTorch + Inductor + Triton的整个编译流程，特别是<code>triton kernel</code>生成与编译分析这部分的过程。</p>\n<h3 id=\"整体编译流程\"><a href=\"#整体编译流程\" class=\"headerlink\" title=\"整体编译流程\"></a>整体编译流程</h3><ol>\n<li><p>前端捕获（TorchDynamo）</p>\n<p> 捕获PyTorch的eager模型，生成一个FX Graph（中间表示IR）</p>\n</li>\n<li><p>图优化与分区（AOTAutograd + Decompositions）</p>\n<p> 对FX Graph进行算子分解（decomposition）、分区（partition）等预处理。</p>\n</li>\n<li><p>后端Lowering（Inductor）</p>\n<p> Inductor接受FX Graph，将算子Lowering成调度后语义（Schedulers）。</p>\n<p> 部分算子会映射到Triton-compatible kernels, 由Inductor创建出表示Triton的kernel源码（字符串）</p>\n</li>\n<li><p>Triton编译器调用</p>\n<p> 对于这些Triton kernel源码（通常是Python函数字符串），Triton编译器执行：</p>\n<pre><code> AST（抽象语法树）分析：将kernel函数代码解析为AST。\n 语义检查与IR构造：建立Triton的中间表示（SSA IR）。\n 后端代码生成：转成GPU可执行代码，比如PTX（NVIDIA）。\n</code></pre>\n</li>\n</ol>\n<h2 id=\"torch-compile-常用-Backend-整理（PyTorch-2-x-）\"><a href=\"#torch-compile-常用-Backend-整理（PyTorch-2-x-）\" class=\"headerlink\" title=\"torch.compile 常用 Backend 整理（PyTorch 2.x+）\"></a><code>torch.compile</code> 常用 Backend 整理（PyTorch 2.x+）</h2><h3 id=\"🧠-Backend-一览表\"><a href=\"#🧠-Backend-一览表\" class=\"headerlink\" title=\"🧠 Backend 一览表\"></a>🧠 Backend 一览表</h3><table>\n<thead>\n<tr>\n<th>Backend 名称</th>\n<th>描述&#x2F;特点</th>\n<th>是否默认</th>\n<th>适用场景&#x2F;建议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&quot;inductor&quot;</code></td>\n<td>⚙️ 默认 backend，基于 Triton 和 C++，性能好、支持广泛</td>\n<td>✅ 默认</td>\n<td>推荐首选，支持大部分算子，适用于通用加速优化</td>\n</tr>\n<tr>\n<td><code>&quot;eager&quot;</code></td>\n<td>PyTorch 原生模式，不做编译优化</td>\n<td>❌</td>\n<td>✅ Debug 模式；模型不支持编译、想跳过加速或便于排查</td>\n</tr>\n<tr>\n<td><code>&quot;aot_eager&quot;</code></td>\n<td>AOT Autograd + Eager，开启 trace 但不做 Inductor 优化</td>\n<td>❌</td>\n<td>Debug 早期图 trace 问题；不编译后端，只记录图结构</td>\n</tr>\n<tr>\n<td><code>&quot;nvfuser&quot;</code></td>\n<td>早期 Fusion backend，面向 CUDA（正在逐步弃用）</td>\n<td>❌</td>\n<td>CUDA 模型上实验使用，不推荐新项目使用</td>\n</tr>\n<tr>\n<td><code>&quot;aot_ts_nvfuser&quot;</code></td>\n<td>TorchScript + NVFuser（图优化 + Fusion）</td>\n<td>❌</td>\n<td>适用于 TorchScript 路径；性能不一定稳定</td>\n</tr>\n<tr>\n<td><code>&quot;aot_torchxla_traced&quot;</code></td>\n<td>用于 XLA（TPU）后端，例如在 Google Cloud TPU 上</td>\n<td>❌</td>\n<td>TPU 训练任务必须使用</td>\n</tr>\n<tr>\n<td><code>&quot;aot_torchxla&quot;</code></td>\n<td>同上，非 traced 版本</td>\n<td>❌</td>\n<td>更可控但 trace 不完整，实验可用</td>\n</tr>\n<tr>\n<td><code>&quot;ipex&quot;</code></td>\n<td>Intel Extension for PyTorch，适用于 Intel CPU&#x2F;GPU</td>\n<td>❌</td>\n<td>在 Intel 平台上推荐使用（x86 CPU 加速明显）</td>\n</tr>\n<tr>\n<td><code>&quot;openxla&quot;</code> &#x2F; <code>&quot;inductor_openxla&quot;</code></td>\n<td>为 OpenXLA 项目构建的 backend，主要用于部署</td>\n<td>❌</td>\n<td>高性能部署场景，开发者可试试 OpenXLA 编译路径（还不太成熟）</td>\n</tr>\n</tbody></table>\n<h3 id=\"✅-常用配置示例\"><a href=\"#✅-常用配置示例\" class=\"headerlink\" title=\"✅ 常用配置示例\"></a>✅ 常用配置示例</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认使用 inductor</span></span><br><span class=\"line\">opt_model = torch.<span class=\"built_in\">compile</span>(model)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用指定 backend</span></span><br><span class=\"line\">opt_model = torch.<span class=\"built_in\">compile</span>(model, backend=<span class=\"string\">&quot;aot_eager&quot;</span>)  <span class=\"comment\"># 或 &quot;eager&quot; / &quot;ipex&quot; 等</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Debug 编译失败时用 fallback</span></span><br><span class=\"line\">torch._dynamo.config.suppress_errors = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"🔍-调试建议\"><a href=\"#🔍-调试建议\" class=\"headerlink\" title=\"🔍 调试建议\"></a>🔍 调试建议</h3><table>\n<thead>\n<tr>\n<th>需求</th>\n<th>推荐做法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>想知道是哪个算子不支持</td>\n<td>设置 <code>TORCH_LOGS=&quot;+dynamo&quot;</code>，或 <code>TORCHDYNAMO_VERBOSE=1</code></td>\n</tr>\n<tr>\n<td>想 dump 编译图</td>\n<td><code>torch._dynamo.export(model, inputs)</code></td>\n</tr>\n<tr>\n<td>想强制 fallback 到 eager</td>\n<td>使用 backend&#x3D;”eager”，或开启 suppress_errors</td>\n</tr>\n<tr>\n<td>编译 crash，但想继续跑</td>\n<td><code>torch._dynamo.config.suppress_errors = True</code></td>\n</tr>\n<tr>\n<td>想 benchmark 对比</td>\n<td>运行多次 warmup 后手动计时</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"🚨-fallback-到-eager-有何区别？\"><a href=\"#🚨-fallback-到-eager-有何区别？\" class=\"headerlink\" title=\"🚨 fallback 到 eager 有何区别？\"></a>🚨 fallback 到 <code>eager</code> 有何区别？</h3><p>当 <code>torch.compile()</code> 编译失败时（如 GPU 类型不支持），会 fallback 到 <code>eager</code>，这时：</p>\n<ul>\n<li>模型依然是用 <code>model_opt = torch.compile(model)</code> 生成的；</li>\n<li>实际执行会自动使用原始 Python 模型，不再启用编译加速；</li>\n<li>与直接运行 <code>model(x)</code> 无本质区别，仅多一层包装；</li>\n<li>可以通过 <code>torch._dynamo.config.suppress_errors = True</code> 开启 fallback。</li>\n</ul>\n<hr>\n<h3 id=\"🧪-如何查看当前后端是否启用成功？\"><a href=\"#🧪-如何查看当前后端是否启用成功？\" class=\"headerlink\" title=\"🧪 如何查看当前后端是否启用成功？\"></a>🧪 如何查看当前后端是否启用成功？</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch._dynamo</span><br><span class=\"line\"><span class=\"built_in\">print</span>(torch._dynamo.explain(model, args))  <span class=\"comment\"># 分析编译情况</span></span><br></pre></td></tr></table></figure>\n\n<p>或设置环境变量调试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> TORCH_LOGS=<span class=\"string\">&quot;+dynamo&quot;</span>     <span class=\"comment\"># 显示编译日志</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> TORCHDYNAMO_VERBOSE=1    <span class=\"comment\"># 显示更多 debug 信息</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"🧩-注册自定义-backend-示例（以-MUSA-为例）：\"><a href=\"#🧩-注册自定义-backend-示例（以-MUSA-为例）：\" class=\"headerlink\" title=\"🧩 注册自定义 backend 示例（以 MUSA 为例）：\"></a>🧩 注册自定义 backend 示例（以 MUSA 为例）：</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">musa_backend</span>(<span class=\"params\">gm, example_inputs</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 替代 torch._inductor.compile_fx 的逻辑</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> compiled_fn</span><br><span class=\"line\"></span><br><span class=\"line\">torch._dynamo.optimizations.backends.register_backend(<span class=\"string\">&quot;musa_inductor&quot;</span>, musa_backend)</span><br><span class=\"line\"></span><br><span class=\"line\">opt_model = torch.<span class=\"built_in\">compile</span>(model, backend=<span class=\"string\">&quot;musa_inductor&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<hr>\n"},{"title":"傅里叶变换","url":"/2023/09/25/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><code>快速傅里叶变换（Fast Fourier Transform，FFT）</code>是一种高效计算离散傅里叶变换（Discrete Fourier Transform，DFT）的算法。它通过利用傅里叶变换的对称性和周期性，将计算复杂度从O(N^2)降低到O(N log N)，其中N是信号长度。</p>\n<p>傅里叶变换将一个信号（或序列）从时域转换到频域，它将信号分解为一系列正弦和余弦函数（频谱成分），表示每个频率成分的振幅和相位。DFT是计算离散信号的傅里叶变换，它将信号离散化为一系列离散采样点。</p>\n<p>FFT算法的核心思想是基于”分治法”，它将DFT的计算分解为一系列较小的DFT计算。它利用了傅里叶变换的周期性和对称性质，将一个长度为N的DFT分解为多个长度为N&#x2F;2的DFT，然后再将这些子问题分解为更小的子问题，以此类推，直到最终计算得到长度为1的DFT。</p>\n<h2 id=\"FFT算法的主要步骤\"><a href=\"#FFT算法的主要步骤\" class=\"headerlink\" title=\"FFT算法的主要步骤\"></a>FFT算法的主要步骤</h2><ol>\n<li>如果输入序列长度为1，则直接返回该值作为DFT结果。</li>\n<li>将输入序列分为偶数索引和奇数索引两个子序列。</li>\n<li>对这两个子序列分别进行递归的FFT计算，得到它们的DFT结果。</li>\n<li>利用DFT结果计算原始序列的DFT结果。这一步骤涉及到频域中的旋转因子（复数），用于将两个子序列的DFT结果结合起来得到原始序列的DFT结果。</li>\n<li>重复上述步骤，直到得到最终的DFT结果。</li>\n</ol>\n<p>FFT算法通过将问题分解为更小的子问题，有效地减少了计算量。它的关键在于计算复杂度为O(N log N)，相比直接计算DFT的O(N^2)大大降低了计算时间。因此，FFT广泛应用于信号处理、频谱分析、图像处理和许多其他领域。</p>\n<p>FFT算法的主要思想是通过将信号分解为多个子问题，利用傅里叶变换的性质减少计算量。其中最常用的是Cooley-Tukey算法，该算法使用了迭代的方式，将FFT问题分解为较小规模的子问题。</p>\n<h2 id=\"Cooley-Tukey算法的基本原理\"><a href=\"#Cooley-Tukey算法的基本原理\" class=\"headerlink\" title=\"Cooley-Tukey算法的基本原理\"></a>Cooley-Tukey算法的基本原理</h2><ol>\n<li>将输入信号分为偶数索引和奇数索引两个子序列。</li>\n<li>对子序列进行递归地进行FFT计算。</li>\n<li>计算旋转因子，通过乘以旋转因子将奇数索引子序列与偶数索引子序列合并。</li>\n<li>重复以上步骤，直到最后得到FFT结果。</li>\n</ol>\n<p>Cooley-Tukey算法利用了傅里叶变换的对称性和周期性，通过将问题分解为较小规模的子问题，大大减少了计算量。该算法的时间复杂度为O(NlogN)，比直接计算傅里叶变换的O(N^2)更高效。</p>\n<p>FFT算法在实际应用中具有广泛的应用，例如频谱分析、滤波、信号压缩等。它能够有效地处理大量数据，并提供了高精度和高效率的频域分析。</p>\n"},{"title":"原码反码与补码","url":"/2022/11/13/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E4%B8%8E%E8%A1%A5%E7%A0%81/","content":"<p>二进制原码、反码与补码</p>\n<ol>\n<li><code>原码</code></li>\n</ol>\n<p>原码是指将最高位作为符号位(0表示正，1表示负)，其它数字位代表数值本身的绝对值的数字表示方式。</p>\n<ol start=\"2\">\n<li><code>反码</code></li>\n</ol>\n<p>反码表示规则为：如果是正数，则表示方法和原码一样；如果是负数，符号位不变，其余各位取反，则得到这个数字的反码表示形式。</p>\n<p>例如，数字6 在8位 计算机中的反码就是它的原码：00000110</p>\n<p>数字－6 在 8位计算机中的反码为：11111001</p>\n<ol start=\"3\">\n<li><code>补码</code></li>\n</ol>\n<p>补码是计算机表示数据的一般方式，其规则为：如果是正数，则表示方法和原码一样；如果是负数，则将数字的反码加上1(相当于将原码数值位取反然后在最低位加1)。</p>\n<p>　　例如：数字6 在8位 计算机中的补码就是它的原码：00000110<br>　　            数字－6 在8 位 计算机中的补码为：1111 1010</p>\n"},{"title":"电磁波概念","url":"/2023/09/25/%E7%94%B5%E7%A3%81%E6%B3%A2%E6%A6%82%E5%BF%B5/","content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>电磁波是一种由电场和磁场相互作用产生的波动现象。它是由振荡的电荷或电流在空间中传播而形成的无质量粒子——光子的传播方式。电磁波具有以下特性：</p>\n<ol>\n<li>频率和波长：电磁波的特征由其频率和波长确定。频率表示单位时间内波动的周期数，以赫兹（Hz）为单位；波长表示连续波峰之间的距离，以米为单位。电磁波的不同频率和波长对应不同的种类，包括无线电波、微波、红外线、可见光、紫外线、X射线和γ射线。</li>\n<li>传播速度：在真空中，电磁波的传播速度是恒定的，称为光速。光速约为每秒 3 × 10^8 米，常用符号 c 表示。光速是自然界中最快的速度，它在不同介质中会有略微变化。</li>\n<li>双重性质：电磁波既具有波动性，也具有粒子性。根据波粒二象性理论，电磁波可以看作是由光子组成的粒子流，这些光子具有能量和动量。</li>\n<li>干涉和衍射：电磁波表现出干涉和衍射现象。干涉是指两个或多个波相互叠加产生增强或抵消的现象，形成明暗相间的干涉图样。衍射是指波通过障碍物或穿过狭缝后发生弯曲和扩散的现象。</li>\n<li>吸收和透射：不同物质对电磁波的吸收和透射能力不同。某些物质对特定频率的电磁波有较高的吸收能力，而其他物质则对该频率的电磁波具有较高的透射能力。</li>\n</ol>\n<p>电磁波的应用广泛，涵盖了许多领域，包括但不限于：</p>\n<ol>\n<li>通信：电磁波是无线通信的基础，包括无线电、微波、卫星通信、移动通信等。</li>\n<li>医学影像：X射线、核磁共振（MRI）、超声波等电磁波用于医学影像和诊断。</li>\n<li>光学技术：可见光波段的电磁波被用于光学显微镜、激光技术、光纤通信、光传感器等。</li>\n<li>天文学：通过观测和分析电磁波，天文学家能够研究和了解宇宙中的天体和现象。</li>\n<li>辐射治疗和辐射检测：电磁波（如γ射线）被用于癌症治疗和辐射检测。</li>\n<li>无人机和雷达技术：微波和雷达技术使用电磁波进行目标探测、跟踪和测距。</li>\n</ol>\n<p>以上仅是电磁波的一些特性和应用领域的简要介绍，电磁波的研究和应用在许多其他领域中也具有重要作用</p>\n<h2 id=\"波长与频率\"><a href=\"#波长与频率\" class=\"headerlink\" title=\"波长与频率\"></a>波长与频率</h2><p>电磁波的波长和频率之间存在一个简单的关系，由光速（速度）来连接它们。这个关系可以由以下公式表示：</p>\n<p>c &#x3D; λν</p>\n<p>其中，</p>\n<ul>\n<li>c 是光速，即电磁波在真空中的传播速度，约等于 3 × 10^8 米&#x2F;秒。</li>\n<li>λ 是电磁波的波长，表示连续波峰之间的距离，以米为单位。</li>\n<li>ν 是电磁波的频率，表示单位时间内波动的周期数，以赫兹（Hz）为单位。</li>\n</ul>\n<p>这个公式说明了电磁波的波长和频率之间的倒数关系。具体而言，频率等于波速除以波长，或者波长等于波速除以频率。</p>\n<p>例如，对于可见光，它的波长范围大约在 400 纳米到 700 纳米之间。假设我们取其中的一个波长 λ &#x3D; 500 纳米，带入公式 c &#x3D; λν，可以求解频率 ν： c &#x3D; λν 3 × 10^8 &#x3D; (500 × 10^(-9)) × ν ν ≈ 6 × 10^14 Hz</p>\n<p>因此，对应波长为 500 纳米的可见光具有大约 6 × 10^14 赫兹的频率。</p>\n<p>这个关系表明，波长和频率是电磁波的基本属性，它们之间具有互相确定的关系。当波长增加时，频率减小；当波长减小时，频率增加。</p>\n<h2 id=\"相位\"><a href=\"#相位\" class=\"headerlink\" title=\"相位\"></a>相位</h2><p>相位（Phase）&#x3D; 距离 &#x2F; 波长 × 2π 其中， 距离是指电磁波传播的距离，通常以长度单位（如米）表示。 波长是电磁波的波长，表示一个完整波周期的长度，也以长度单位（如米）表示。 2π 是圆周率 π 的倍数，用来将相位从弧度单位转换为角度单位（弧度&#x3D;角度 × π &#x2F; 180）。 这个公式描述了电磁波传播中相位的变化。根据这个公式，当传播距离是波长的整数倍时，相位的变化是完整的周期（2π的倍数）；当传播距离是波长的一半时，相位的变化是半个周期（π的倍数）。 相位的概念在电磁波的分析和处理中非常重要，它决定了波的位置、波的形状以及与其他波的干涉和合成等现象。</p>\n"},{"title":"面试","url":"/2024/02/15/%E9%9D%A2%E8%AF%95/","content":"<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><ol>\n<li>本硕毕业与bit, 专业是什么，研究方向是什么</li>\n</ol>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><ol>\n<li>描述从研究生到现在做的方向和事情，简短概括</li>\n</ol>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ol>\n<li>简要概括，描述出自己掌握的程度。比如：雷达检测跟踪算法，测量算法研究的较多，c++ cuda使用过</li>\n</ol>\n<h3 id=\"目标检测和目标跟踪\"><a href=\"#目标检测和目标跟踪\" class=\"headerlink\" title=\"目标检测和目标跟踪\"></a>目标检测和目标跟踪</h3><ol>\n<li>看论文<ol>\n<li>CFAR检测的原理：</li>\n<li>卡尔曼滤波原理</li>\n<li>EKF和UKF的原理</li>\n<li>数据关联算法最近邻域与概率密度数据关联算法</li>\n<li>车载毫米波雷达的标定</li>\n<li>车载毫米波雷达自车速度估计</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"目标测量\"><a href=\"#目标测量\" class=\"headerlink\" title=\"目标测量\"></a>目标测量</h3><ol>\n<li>测速、测距、测角原理熟悉下<ol>\n<li>测距的原理</li>\n<li>测速的原理</li>\n<li>测角的原理</li>\n<li>wlp超分辨测角</li>\n<li>解速度模糊（TDM参差帧，余数定理，chirpdelay，航迹差分）</li>\n<li>抗干扰的方法（FH，CS，PS）</li>\n<li>干扰抑制的方法</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"FMCW和MIMO\"><a href=\"#FMCW和MIMO\" class=\"headerlink\" title=\"FMCW和MIMO\"></a>FMCW和MIMO</h3><h3 id=\"matlab\"><a href=\"#matlab\" class=\"headerlink\" title=\"matlab\"></a>matlab</h3><h3 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h3><ol>\n<li>基本命令熟悉： <code>ls cd pwd find grep rm mkdir touch</code></li>\n<li><code>git</code></li>\n</ol>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3><ol>\n<li><p>基础语法 c++ primier</p>\n<ul>\n<li><p>static的作用</p>\n<p> static修饰变量能够改变变量的生命周期和存储位置，存储在全局存储空间中生命周期是整个程序的运行周期；</p>\n<p> static修饰函数使得该函数的作用域限定在定义该函数的文件内。</p>\n<p> static成员函数只能调用static类型的成员变量，因为该类型的函数可由类名直接调用，没有对象在内存中就没有对象的普通成员变量，static变量生命周期是整个程序执行周期与对象无关。</p>\n<p> static成员变量被所有的对象共用，可以用类名直接访问。</p>\n</li>\n<li><p>引用和指针的区别</p>\n<p> 引用是变量的别名，指针是一个变量，它的值是指向变量的地址； 变量是内存的一个位置，地址是这个内存位置的索引。</p>\n</li>\n<li><p>封装多态和继承（面向对象编程的3个特性）</p>\n<p> 把数据和函数功能封装在一起，多态包含重载</p>\n</li>\n<li><p>虚析构函数的作用</p>\n<p> 虚析构函数保证子类被正常析构，子类重写基类的析构函数，指向子类对象的基类类型指针会调用子类的析构函数释放子类对象，</p>\n</li>\n<li><p>struct和类的区别</p>\n<p> struct默认是public的，类默认是private</p>\n</li>\n<li><p>const的作用<br> const修饰变量表示初始化后变量的值不可改变，const修饰指针表示指针不可改变；运行时不可改变。</p>\n</li>\n<li><p>inline</p>\n<p> 将调用函数的位置用函数体替代在编译的时候。运行时不需要函数调用，速度更快，但是代码可能会变得臃肿。</p>\n</li>\n<li><p>#define</p>\n<p> 宏定义，用字符串替换字符串。</p>\n</li>\n</ul>\n</li>\n<li><p>cmake</p>\n</li>\n</ol>\n<h3 id=\"cuda\"><a href=\"#cuda\" class=\"headerlink\" title=\"cuda\"></a>cuda</h3><ol>\n<li><p>看下原理</p>\n<ol>\n<li><p>GPU的硬件模型</p>\n<p>GPU由几十至成百个SM组成，每个SM被分为多个sub-partition，每个sub-partition包含多个cuda core和少数tensor core，除了外挂的显存GPU内部包含L2 cache全局可见，L1 cache，shared memory，它们共用同一个物理内存区域，对一个SM可见，此外每个sub partition还包含寄存器文件等。</p>\n</li>\n<li><p>GPU的编程模型</p>\n<p>一个kernel对应一个grid，每个grid被分成多个block，每个block包含多个thread，每个block在一个SM上被执行，被划分为多个warp，这些warp被分配给每个sub-partition来执行，每个warp有32线程。</p>\n<p>nvcc将主机端和设备端的代码分别编译、链接生成可执行文件，主机端的代码由CPU执行，设备端的代码由cuda runtime支持在设备端执行。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"项目经历\"><a href=\"#项目经历\" class=\"headerlink\" title=\"项目经历\"></a>项目经历</h2><ol>\n<li>叙述一遍，有逻辑<ul>\n<li>项目1： 设计 -&gt; 实现 -&gt; 定点化 -&gt; 工程化 -&gt; 功能安全 -&gt; 文档 -&gt; 专利<ul>\n<li>mini算法的整体处理流程</li>\n<li>定点化过程与精度的分析</li>\n<li>测试case的设计</li>\n<li>功能安全设计方法</li>\n</ul>\n</li>\n<li>项目2：重构 -&gt; 抗干扰 -&gt; 测试分析问题原因 -&gt; 对比<ul>\n<li>原始平台的算法流程与原理</li>\n<li>原始平台测试的问题与解决</li>\n<li>新平台的算法流程与搭建过程</li>\n<li>新平台测试的问题（主要是没有搞定移相器的校准）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"专利\"><a href=\"#专利\" class=\"headerlink\" title=\"专利\"></a>专利</h2><ol>\n<li>回顾一下</li>\n<li>问就介绍</li>\n</ol>\n"},{"title":"about","url":"/about/index-1.html","content":""},{"title":"about","url":"/about/index.html","content":"<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>郝智<br>毕业于北京理工大学</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ol>\n<li>mail: <a href=\"mailto:&#x68;&#x61;&#x6f;&#x7a;&#x68;&#x69;&#98;&#105;&#116;&#64;&#49;&#54;&#51;&#46;&#99;&#111;&#x6d;\">&#x68;&#x61;&#x6f;&#x7a;&#x68;&#x69;&#98;&#105;&#116;&#64;&#49;&#54;&#51;&#46;&#99;&#111;&#x6d;</a></li>\n</ol>\n"},{"title":"categories","url":"/categories/index.html","content":""},{"title":"tags","url":"/tags/index.html","content":""}]